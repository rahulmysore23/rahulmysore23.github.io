[{"content":"\u003cp\u003eA few months ago, I found myself constantly juggling multiple custom services at work. These services were binaries written in Go, designed for data observability purposes. While they were efficient at their job, managing them was a bit of a hassle. I often had to check their status, restart them, or stop them entirely using the \u003ccode\u003esystemctl\u003c/code\u003e command. Typing \u003ccode\u003esystemctl status \u0026lt;service\u0026gt;\u003c/code\u003e over and over again started to feel tedious. Sure, I could have created aliases, but I wanted something more interactive—a \u003cstrong\u003eTUI (Terminal User Interface)\u003c/strong\u003e that would make the process smoother and more enjoyable.\u003c/p\u003e\n\u003cp\u003eThat’s when I decided to start a side project: \u003cstrong\u003esysdmon\u003c/strong\u003e, a TUI-based systemd service manager written in Go. Like many personal projects, it sat on the shelf for a while. But recently, I dusted it off, spent a couple of hours polishing it, and now it’s ready to share with the world.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"why-i-built-sysdmon\"\u003eWhy I Built sysdmon\u003c/h2\u003e\n\u003cp\u003eAt work, I often had to manage multiple custom services. These services were critical for monitoring and analyzing data, but managing them manually using \u003ccode\u003esystemctl\u003c/code\u003e was time-consuming. I wanted a tool that could:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eList all systemd services\u003c/strong\u003e in one place.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eShow detailed information\u003c/strong\u003e about each service (status, memory usage, CPU usage, etc.).\u003c/li\u003e\n\u003cli\u003eAllow me to \u003cstrong\u003estart, stop, and restart services\u003c/strong\u003e with simple keybindings.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFilter services\u003c/strong\u003e by name for quick access.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eWhile aliases or scripts could have solved some of these problems, I wanted a more interactive and visually appealing solution. That’s how \u003cstrong\u003esysdmon\u003c/strong\u003e was born.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e\u003cimg src=\"/images/sysdmon.jpg\" alt=\"sysdmon\"\u003e\u003c/p\u003e\n\u003ch2 id=\"what-is-sysdmon\"\u003eWhat is sysdmon?\u003c/h2\u003e\n\u003chr\u003e\n\u003cp\u003e\u003cstrong\u003esysdmon\u003c/strong\u003e is a lightweight, TUI-based tool for managing systemd services. It’s written in Go and uses the \u003ca href=\"https://github.com/rivo/tview\"\u003etview\u003c/a\u003e library for the terminal interface. Here’s what it can do:\u003c/p\u003e\n\u003ch3 id=\"features\"\u003eFeatures\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eList all systemd services\u003c/strong\u003e: Scroll through a list of all services on your system.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eView service details\u003c/strong\u003e: Get detailed information about a service, including:\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eStatus\u003c/strong\u003e: Active, inactive, or failed.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMemory Usage\u003c/strong\u003e: Human-readable memory consumption (e.g., 512 MB).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCPU Usage\u003c/strong\u003e: CPU usage as a percentage.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eEnabled State\u003c/strong\u003e: Whether the service is enabled or disabled.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFilter services\u003c/strong\u003e: Search for services by name in real-time.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eControl services\u003c/strong\u003e: Start, stop, or restart services directly from the TUI.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCustom service list\u003c/strong\u003e: Load a custom list of services from a JSON file.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"keybindings\"\u003eKeybindings\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCtrl+S\u003c/strong\u003e: Start the selected service.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCtrl+T\u003c/strong\u003e: Stop the selected service.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCtrl+R\u003c/strong\u003e: Restart the selected service.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCtrl+F\u003c/strong\u003e: Focus on the search bar.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eEnter\u003c/strong\u003e: Return focus to the services list.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"how-to-use-sysdmon\"\u003eHow to Use sysdmon\u003c/h2\u003e\n\u003ch3 id=\"installation\"\u003eInstallation\u003c/h3\u003e\n\u003cp\u003eYou can install \u003cstrong\u003esysdmon\u003c/strong\u003e using \u003ccode\u003ego install\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ego install github.com/rahulmysore23/sysdmon@latest\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAlternatively, you can download pre-built binaries from the \u003ca href=\"https://github.com/rahulmysore23/sysdmon/releases\"\u003eReleases\u003c/a\u003e page.\u003c/p\u003e\n\u003ch3 id=\"running-sysdmon\"\u003eRunning sysdmon\u003c/h3\u003e\n\u003ch4 id=\"default-mode-list-all-services\"\u003eDefault Mode (List All Services)\u003c/h4\u003e\n\u003cp\u003eTo list all systemd services, simply run:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esysdmon\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"custom-mode-load-services-from-json-file\"\u003eCustom Mode (Load Services from JSON File)\u003c/h4\u003e\n\u003cp\u003eIf you want to load a custom list of services, create a JSON file (\u003ccode\u003econfig.json\u003c/code\u003e) like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;services\u0026#34;\u003c/span\u003e: [\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;nginx.service\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;docker.service\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ssh.service\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThen run:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esysdmon -config /path/to/config.json\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"the-journey-of-building-sysdmon\"\u003eThe Journey of Building sysdmon\u003c/h2\u003e\n\u003cp\u003eBuilding \u003cstrong\u003esysdmon\u003c/strong\u003e was a fun and rewarding experience. It started as a simple idea to make my workflow more efficient, but it quickly turned into a learning opportunity. I got to explore Go’s \u003ccode\u003edbus\u003c/code\u003e package for interacting with systemd, and I discovered the power of TUI libraries like \u003ccode\u003etview\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eOf course, like most personal projects, it sat untouched for a while. But when I finally revisited it, I was able to polish it up and add some nice features, like filtering and custom service lists. It’s amazing what you can accomplish in just a couple of hours when you’re motivated!\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"future-improvements\"\u003eFuture Improvements\u003c/h2\u003e\n\u003cp\u003eWhile \u003cstrong\u003esysdmon\u003c/strong\u003e is functional, there’s always room for improvement. Here are some ideas for future enhancements:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eService Logs Integration\u003c/strong\u003e: View real-time logs for a selected service.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBulk Operations\u003c/strong\u003e: Start, stop, or restart multiple services at once.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRemote System Management\u003c/strong\u003e: Manage services on remote systems via SSH.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCustom Themes\u003c/strong\u003e: Add support for dark mode and custom colors.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePlugin System\u003c/strong\u003e: Allow users to extend functionality with plugins.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eIf you’re interested in contributing, feel free to check out the \u003ca href=\"https://github.com/rahulmysore23/sysdmon\"\u003eGitHub repository\u003c/a\u003e. Pull requests and ideas are always welcome!\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"final-thoughts\"\u003eFinal Thoughts\u003c/h2\u003e\n\u003cp\u003eBuilding \u003cstrong\u003esysdmon\u003c/strong\u003e was a fun and fulfilling side project. It not only solved a personal pain point but also gave me a chance to dive deeper into Go and TUI development. If you’re someone who manages systemd services frequently, I hope you find this tool useful. And if you have any feedback or ideas for improvement, don’t hesitate to reach out or contribute to the project.\u003c/p\u003e\n\u003cp\u003eHappy coding! 🚀\u003c/p\u003e\n","description":null,"image":null,"permalink":"https://rahulmysore23.github.io/blogs/sysdmon/","title":"Building a TUI for Managing Systemd Services: A Fun Side Project"},{"content":"\u003cp\u003eWhen my friend and I signed up for \u003cstrong\u003eHackMidwest 2024\u003c/strong\u003e, we had no idea what we were going to build. Zero. Zilch. Nada. We showed up with our laptops, a vague sense of excitement, and a whole lot of caffeine. The hackathon kicked off with some awesome workshops—Red Hat OpenShift, AWS, Pinata, and more. We attended as many as we could, soaking up knowledge and trying to figure out what we could possibly create in 24 hours.\u003c/p\u003e\n\u003cp\u003eThen came the moment of truth: the challenge announcements. We scanned the list, and one immediately caught our eye—the \u003cstrong\u003eAskUSDA Challenge\u003c/strong\u003e. It was intriguing, doable, and had a clear problem statement: help USDA provide better information to the public using AI. We looked at each other and said, “Let’s do this.”\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"the-plan-or-lack-thereof\"\u003eThe Plan (or Lack Thereof)\u003c/h2\u003e\n\u003cp\u003eWe didn’t have a detailed roadmap, but we knew we wanted to build something around \u003cstrong\u003eLarge Language Models (LLMs)\u003c/strong\u003e and \u003cstrong\u003eRetrieval-Augmented Generation (RAG)\u003c/strong\u003e. The idea was simple: create a chatbot that could answer questions using USDA’s data. But here’s the twist—we wanted to make it flexible enough to work with \u003cem\u003eany\u003c/em\u003e dataset, not just USDA-specific information.\u003c/p\u003e\n\u003cp\u003eWe started by exploring \u003cstrong\u003eRed Hat OpenShift\u003c/strong\u003e for deployment, but mid-development, we hit a snag. Deploying a model there was more complex than we anticipated. So, we pivoted to \u003cstrong\u003eAWS\u003c/strong\u003e. Specifically, we used \u003cstrong\u003eAWS Bedrock\u003c/strong\u003e and its \u003cstrong\u003eKnowledge Base\u003c/strong\u003e feature for RAG. It was surprisingly straightforward, and within hours, we had a working prototype.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/dchat_arch.png\" alt=\"Architecture\"\u003e\u003cbr\u003e\n\u003cem\u003eArchitecture of our solution\u003c/em\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"the-build\"\u003eThe Build\u003c/h2\u003e\n\u003cp\u003eHere’s the breakdown of what we built in 24 hours:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eA Scraper to Rule Them All\u003c/strong\u003e: We created a scraper tool called \u003cstrong\u003e\u003ca href=\"https://github.com/rahulmysore23/No-Game-No-Scrape\"\u003eNo Game No Scrape\u003c/a\u003e\u003c/strong\u003e (yes, the name is a nerdy anime reference). It can scrape data from any website and format it for our chatbot.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eThe Chatbot\u003c/strong\u003e: We built \u003cstrong\u003e\u003ca href=\"https://github.com/rahulmysore23/D-Chat\"\u003eD-Chat\u003c/a\u003e\u003c/strong\u003e, a chatbot powered by AWS Bedrock and RAG. It’s designed to ingest scraped data, sync it with the knowledge base, and provide accurate, context-aware answers. The best part? It’s not USDA-specific. You can use it for any dataset.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eThe Prompt\u003c/strong\u003e: We nailed down a simple yet effective prompt that guided the chatbot to provide concise, accurate answers. It was a game-changer.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"the-usda-team-and-the-presentation\"\u003eThe USDA Team and the Presentation\u003c/h2\u003e\n\u003cp\u003eMidway through the hackathon, we hit a few roadblocks. Thankfully, the USDA team was there to help. They answered our questions, clarified the requirements, and even gave us some insights into how their data is structured. It was a huge help.\u003c/p\u003e\n\u003cp\u003eWhen it came time to present, every team got just \u003cstrong\u003e2 minutes\u003c/strong\u003e to showcase their solution. We kept it simple: we explained the problem, demonstrated the chatbot, and highlighted its flexibility. The judges were impressed, and by the end of the hackathon, we found out we’d \u003cstrong\u003ewon the USDA Challenge\u003c/strong\u003e!\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/dchat_demo.jpeg\" alt=\"Demo\"\u003e\u003cbr\u003e\n\u003cem\u003eDemo of our chatbot in action\u003c/em\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"lessons-learned\"\u003eLessons Learned\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003ePivot When Necessary\u003c/strong\u003e: We started with OpenShift but switched to AWS when things got too complicated. Flexibility is key in hackathons.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eKeep It Simple\u003c/strong\u003e: Our scraper and chatbot were built with simplicity in mind. No over-engineering, just a focus on solving the problem.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAsk for Help\u003c/strong\u003e: The USDA team was incredibly supportive. Don’t hesitate to reach out to mentors or challenge sponsors.\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch2 id=\"final-thoughts\"\u003eFinal Thoughts\u003c/h2\u003e\n\u003cp\u003eHackMidwest 2024 was an incredible experience. We went in with no plan, built something we’re proud of, and even won a challenge. If you’re curious about our project, check out the links below:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/rahulmysore23/No-Game-No-Scrape\"\u003eNo-Game-No-Scrape\u003c/a\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/rahulmysore23/D-Chat\"\u003eD-Chat\u003c/a\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://www.linkedin.com/posts/rahulmysore23_hackmidwest2024-usdachallenge-agriculturaltech-activity-7248075478459113472-f4G7/?utm_source=share\u0026amp;utm_medium=member_desktop\"\u003eMy LinkedIn Post\u003c/a\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAnd if you’re thinking about participating in a hackathon, just go for it. You never know what you’ll end up building—or winning. 😊\u003c/p\u003e\n","description":null,"image":null,"permalink":"https://rahulmysore23.github.io/blogs/hackmidwest/","title":"HackMidwest 2024: How We Built a USDA Chatbot in 24 Hours (and Won!)"},{"content":"\u003cp\u003eComing soon\u003c/p\u003e\n","description":"My journey with music","image":null,"permalink":"https://rahulmysore23.github.io/music/","title":"Rahul and Music"},{"content":"\u003cp\u003eBack in the early days of my bachelor\u0026rsquo;s degree, a friend of mine started a technical blog called \u003ca href=\"http://thecodenote.com\"\u003eThe Code Note\u003c/a\u003e. I thought it was the coolest thing ever. Inspired, I decided to start my own blog. I spent days brainstorming a name (which, honestly, I can’t even remember now) and finally launched it. It was your typical \u0026ldquo;how to solve LeetCode problems\u0026rdquo; blog. Yeah, I know—there are already millions of those out there. But hey, it got me started.\u003c/p\u003e\n\u003cp\u003eI posted a couple of times, following the same old formula: problem statement, solution, and code. While it was a good exercise, it didn’t really excite me. At the time, I had very little real-world experience, and the blog felt more like a checklist item than a passion project. After landing my first job as a software engineer, I eventually deleted the blog. It just didn’t feel like \u0026ldquo;me.\u0026rdquo;\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"after-a-while\"\u003eAfter a While\u003c/h3\u003e\n\u003cp\u003eFast forward five years, and I’ve been working as a software engineer, wearing all sorts of hats. I’ve done front-end, back-end, platform engineering, led teams, mentored junior developers, and most importantly, solved a ton of software problems. It’s been a wild ride, and I’ve learned a lot along the way.\u003c/p\u003e\n\u003cp\u003eEven though I deleted that old blog, the desire to share my experiences never really went away. I’ve always wanted to have a presence on the internet where I could talk about my journey in the tech industry, share knowledge about tools or software that aren’t well-documented, and write about system setups that boost productivity. I also wanted to share solutions to technical problems I’ve encountered—things that took me hours (or days) to figure out, but could save someone else a lot of time.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"new-beginnings\"\u003eNew Beginnings\u003c/h3\u003e\n\u003cp\u003eRecently, I made a big decision: I quit my job as a software engineer after five years and four companies (three of which were startups). I’m now pursuing a Master’s degree in Computer Science. This new chapter is all about learning, growing, and giving back to the community.\u003c/p\u003e\n\u003cp\u003eOne of the things I’m most excited about is starting this blog. It’s not just a place to share my experiences as a software engineer, but also a space to write about things that aren’t always easy to understand—whether it’s setting up a development environment, debugging a tricky issue, or exploring new tools and technologies.\u003c/p\u003e\n\u003cp\u003eThis blog is also a commitment to myself. It’s a promise to be consistent, disciplined, and intentional about sharing what I’ve learned. I hope it becomes a resource that others find useful, and maybe even inspiring.\u003c/p\u003e\n\u003cp\u003eHere’s to new beginnings! 🚀\u003c/p\u003e\n","description":null,"image":null,"permalink":"https://rahulmysore23.github.io/blogs/first_post/","title":"My Presence on the Internet"}]