[{"content":"\u003ch1 id=\"a-tale-of-forever-programs-zombie-processes-and-the-art-of-not-panicking\"\u003eA Tale of Forever Programs, Zombie Processes, and the Art of Not Panicking\u003c/h1\u003e\n\u003cp\u003eAlright, folks, gather \u0026lsquo;round. Let me tell you the story of my first interview with a blockchain company (which shall remain nameless, because, well, NDAs are a thing). It was Round 1, and the focus was on OS/System Programming. The interview was scheduled for 1 hour and 30 minutes, and I was told to have a Linux environment ready. Sounds simple enough, right? Wrong. This is where the adventure begins.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"the-setup-windows-wsl2-and-a-dash-of-desperation\"\u003eThe Setup: Windows, WSL2, and a Dash of Desperation\u003c/h2\u003e\n\u003cp\u003eSo, here’s the thing: I was using Windows at the time. \u003cem\u003eGasp!\u003c/em\u003e I know, I know. But hear me out—I was in the process of switching to \u003cstrong\u003eHyprland\u003c/strong\u003e (a fancy tiling window manager for Linux), and I didn’t want to risk breaking my system right before an interview. So, I did what any sane person would do: I fired up \u003cstrong\u003eWSL2\u003c/strong\u003e (Windows Subsystem for Linux). It’s like having a Linux terminal inside Windows, which is great until you realize you’re essentially living in two operating systems at once. Schrödinger’s developer, if you will.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"the-task-forever-programs-and-the-watchful-monitor\"\u003eThe Task: Forever Programs and the Watchful Monitor\u003c/h2\u003e\n\u003cp\u003eThe interview began, and I was given a task to write two programs:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eForever Program\u003c/strong\u003e: A program that takes an argument and runs forever. Simple, right?\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMonitor Program\u003c/strong\u003e: A program that monitors the Forever Program and spawns a new instance if it gets killed. Think of it as a helicopter parent for processes.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eI decided to use \u003cstrong\u003eGo\u003c/strong\u003e for this task. Why? Because Go is my comfort language. It’s like that one hoodie you always reach for when you’re feeling lazy. Plus, Go has excellent concurrency support and built-in packages for OS-related stuff, which made it perfect for this task.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"the-forever-program-a-love-story\"\u003eThe Forever Program: A Love Story\u003c/h2\u003e\n\u003cp\u003eLet’s start with the Forever Program. Here’s the code:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;flag\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;os\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;os/signal\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;syscall\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;InfStones, interview 1 - Forever\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#75715e\"\u003e// Parse command line arg\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#a6e22e\"\u003enumbPtr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eflag\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eInt\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;numb\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e42\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;an int\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#a6e22e\"\u003eflag\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eParse\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Number entered is:\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003enumbPtr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#75715e\"\u003e// Wait till kill signal is passed\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make(\u003cspan style=\"color:#66d9ef\"\u003echan\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eos\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSignal\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e// we need to reserve to buffer size 1, so the notifier are not blocked\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#a6e22e\"\u003esignal\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNotify\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eos\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eInterrupt\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003esyscall\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSIGTERM\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eselect\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Process Killed\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis program is pretty straightforward. It takes an integer argument, prints it, and then waits for a kill signal. When it receives the signal, it prints \u0026ldquo;Process Killed\u0026rdquo; and exits. It’s like that friend who says, “I’ll stay as long as you want me to,” but leaves the moment you hint at it.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"the-monitor-program-helicopter-parent-mode-activated\"\u003eThe Monitor Program: Helicopter Parent Mode Activated\u003c/h2\u003e\n\u003cp\u003eNow, onto the \u003cstrong\u003eMonitor Program\u003c/strong\u003e. This one was a bit more involved. The goal was to keep an eye on the Forever Program and restart it if it got killed. Here’s the code:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003epackage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fmt\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;log\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;os\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;os/exec\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;os/signal\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;reflect\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;strings\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;syscall\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;time\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;github.com/shirou/gopsutil/process\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eFOREVER_PROGRAM\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;forever\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eFOREVER_PROGRAM_PATH\u003c/span\u003e = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/home/rmysore/interviews/infstones/forever/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;InfStones, interview 1 - Monitor\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#a6e22e\"\u003einitMap\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make(\u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#a6e22e\"\u003einit\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#75715e\"\u003e// Poll and Check for forever processes and store them - Poll and events?\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#75715e\"\u003e// User ticker (Optional - and kill event?)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#a6e22e\"\u003eticker\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNewTicker\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSecond\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#a6e22e\"\u003edone\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make(\u003cspan style=\"color:#66d9ef\"\u003echan\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make(\u003cspan style=\"color:#66d9ef\"\u003echan\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eos\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSignal\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e// we need to reserve to buffer size 1, so the notifier are not blocked\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#a6e22e\"\u003esignal\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eNotify\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eos\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eInterrupt\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003esyscall\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSIGTERM\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#66d9ef\"\u003ego\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#66d9ef\"\u003eselect\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003edone\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eticker\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eC\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Tick at\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003et\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// If the last poll and new poll has changes, Find the killed process and start it again\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ecompareMap\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e make(\u003cspan style=\"color:#66d9ef\"\u003emap\u003c/span\u003e[\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e]\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eprocesses\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eprocess\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eProcesses\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eprocess\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eprocesses\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eprocess\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eName\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estrings\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eCompare\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eFOREVER_PROGRAM\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#a6e22e\"\u003ecmdL\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eprocess\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eCmdline\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e !\u003cspan style=\"color:#a6e22e\"\u003einit\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003einitMap\u003c/span\u003e[int(\u003cspan style=\"color:#a6e22e\"\u003eprocess\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePid\u003c/span\u003e)] = \u003cspan style=\"color:#a6e22e\"\u003ecmdL\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003ecompareMap\u003c/span\u003e[int(\u003cspan style=\"color:#a6e22e\"\u003eprocess\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePid\u003c/span\u003e)] = \u003cspan style=\"color:#a6e22e\"\u003ecmdL\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// compare maps\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e !\u003cspan style=\"color:#a6e22e\"\u003ereflect\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDeepEqual\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003einitMap\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ecompareMap\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003einit\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ek\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erange\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003einitMap\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eok\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecompareMap\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ek\u003c/span\u003e]; !\u003cspan style=\"color:#a6e22e\"\u003eok\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#75715e\"\u003e// Start process again\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003eargs\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estrings\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eSplit\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ev\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eargs\u003c/span\u003e[len(\u003cspan style=\"color:#a6e22e\"\u003eargs\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026amp;\u0026#34;\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eargs\u003c/span\u003e = append(\u003cspan style=\"color:#a6e22e\"\u003eargs\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026amp;\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Starting process:\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eargs\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003ecmd\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eexec\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eCommand\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;nohup\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eargs\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecmd\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eStart\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatal\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecmd\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWait\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatal\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e       }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003einit\u003c/span\u003e = \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// replace init with compare\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003einitMap\u003c/span\u003e = \u003cspan style=\"color:#a6e22e\"\u003ecompareMap\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e }()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eselect\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;-\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ec\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#a6e22e\"\u003efmt\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ePrintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Process Killed\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#a6e22e\"\u003eticker\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eStop\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#a6e22e\"\u003edone\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;-\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis program is like a helicopter parent. It checks on the Forever Program every second (using a ticker) to make sure it’s still alive. If it finds that the Forever Program has been killed, it starts a new instance. It’s basically saying, “Oh, you thought you could escape? Think again.”\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"the-plot-twist-zombie-processes\"\u003eThe Plot Twist: Zombie Processes\u003c/h2\u003e\n\u003cp\u003eNow, here’s where things got interesting. When I killed and respawned the Forever Program multiple times, I noticed something strange: \u003cstrong\u003edefunct processes\u003c/strong\u003e were being created. A defunct process, also known as a \u003cstrong\u003ezombie process\u003c/strong\u003e, is a process that has completed execution but still has an entry in the process table. It’s like a ghost that haunts your system, refusing to leave until you properly deal with it.\u003c/p\u003e\n\u003ch3 id=\"why-does-this-happen\"\u003eWhy Does This Happen?\u003c/h3\u003e\n\u003cp\u003eIn Linux, when a process finishes execution, it sends a signal to its parent process to let it know it’s done. The parent process is supposed to read the child’s exit status (a process called “reaping”). If the parent doesn’t do this, the child process becomes a zombie. It’s not using any resources, but it’s still taking up space in the process table.\u003c/p\u003e\n\u003ch3 id=\"the-fix-reaping-the-zombies\"\u003eThe Fix: Reaping the Zombies\u003c/h3\u003e\n\u003cp\u003eThe issue in my Monitor Program was that it wasn’t properly waiting for the child process to exit. To fix this, I modified the Monitor Program to wait for the process while initializing it in a goroutine. Here’s the relevant part of the code:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-go\" data-lang=\"go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ego\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efunc\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ecmd\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eexec\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eCommand\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;nohup\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eargs\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecmd\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eStart\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatal\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecmd\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eWait\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enil\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eFatal\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eerr\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eBy waiting for the process to exit in a goroutine, we ensure that the child process is properly reaped, preventing it from becoming a zombie. It’s like giving the ghost a proper burial so it can finally rest in peace.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"lessons-learned-the-interview-was-a-win-regardless\"\u003eLessons Learned: The Interview Was a Win, Regardless\u003c/h2\u003e\n\u003cp\u003eThis interview was a rollercoaster of emotions. I went from feeling confident to panicking about zombie processes to finally fixing the issue. But you know what? It was a fantastic learning experience. I got to dive deep into process management in Linux, and I learned a lot about handling defunct processes. Plus, I can now confidently say that I’ve dealt with zombie processes—how many people can say that?\u003c/p\u003e\n\u003cp\u003eWhether or not I get the job, I’m walking away with some valuable knowledge. And hey, at least I have a great story to tell. Wish me luck! 🤞\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e\u003cstrong\u003eTL;DR:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUsed WSL2 because I was too scared to break my Linux setup.\u003c/li\u003e\n\u003cli\u003eWrote a Forever Program and a Monitor Program in Go.\u003c/li\u003e\n\u003cli\u003eAccidentally created zombie processes.\u003c/li\u003e\n\u003cli\u003eFixed it by properly reaping child processes.\u003c/li\u003e\n\u003cli\u003eLearned a ton and had fun.\u003c/li\u003e\n\u003cli\u003eFingers crossed for the job! 🚀\u003c/li\u003e\n\u003c/ul\u003e\n","description":null,"image":null,"permalink":"https://rahulmysore23.github.io/blogs/startup-interview-and-defunct-process/","title":"Startup Interview and Defunct Process"},{"content":"\u003cp\u003eA few months ago, I found myself constantly juggling multiple custom services at work. These services were binaries written in Go, designed for data observability purposes. While they were efficient at their job, managing them was a bit of a hassle. I often had to check their status, restart them, or stop them entirely using the \u003ccode\u003esystemctl\u003c/code\u003e command. Typing \u003ccode\u003esystemctl status \u0026lt;service\u0026gt;\u003c/code\u003e over and over again started to feel tedious. Sure, I could have created aliases, but I wanted something more interactive—a \u003cstrong\u003eTUI (Terminal User Interface)\u003c/strong\u003e that would make the process smoother and more enjoyable.\u003c/p\u003e\n\u003cp\u003eThat’s when I decided to start a side project: \u003cstrong\u003esysdmon\u003c/strong\u003e, a TUI-based systemd service manager written in Go. Like many personal projects, it sat on the shelf for a while. But recently, I dusted it off, spent a couple of hours polishing it, and now it’s ready to share with the world.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"why-i-built-sysdmon\"\u003eWhy I Built sysdmon\u003c/h2\u003e\n\u003cp\u003eAt work, I often had to manage multiple custom services. These services were critical for monitoring and analyzing data, but managing them manually using \u003ccode\u003esystemctl\u003c/code\u003e was time-consuming. I wanted a tool that could:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eList all systemd services\u003c/strong\u003e in one place.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eShow detailed information\u003c/strong\u003e about each service (status, memory usage, CPU usage, etc.).\u003c/li\u003e\n\u003cli\u003eAllow me to \u003cstrong\u003estart, stop, and restart services\u003c/strong\u003e with simple keybindings.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFilter services\u003c/strong\u003e by name for quick access.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eWhile aliases or scripts could have solved some of these problems, I wanted a more interactive and visually appealing solution. That’s how \u003cstrong\u003esysdmon\u003c/strong\u003e was born.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e\u003cimg src=\"/images/sysdmon.jpg\" alt=\"sysdmon\"\u003e\u003c/p\u003e\n\u003ch2 id=\"what-is-sysdmon\"\u003eWhat is sysdmon?\u003c/h2\u003e\n\u003chr\u003e\n\u003cp\u003e\u003cstrong\u003esysdmon\u003c/strong\u003e is a lightweight, TUI-based tool for managing systemd services. It’s written in Go and uses the \u003ca href=\"https://github.com/rivo/tview\"\u003etview\u003c/a\u003e library for the terminal interface. Here’s what it can do:\u003c/p\u003e\n\u003ch3 id=\"features\"\u003eFeatures\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eList all systemd services\u003c/strong\u003e: Scroll through a list of all services on your system.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eView service details\u003c/strong\u003e: Get detailed information about a service, including:\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eStatus\u003c/strong\u003e: Active, inactive, or failed.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMemory Usage\u003c/strong\u003e: Human-readable memory consumption (e.g., 512 MB).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCPU Usage\u003c/strong\u003e: CPU usage as a percentage.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eEnabled State\u003c/strong\u003e: Whether the service is enabled or disabled.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eFilter services\u003c/strong\u003e: Search for services by name in real-time.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eControl services\u003c/strong\u003e: Start, stop, or restart services directly from the TUI.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCustom service list\u003c/strong\u003e: Load a custom list of services from a JSON file.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"keybindings\"\u003eKeybindings\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCtrl+S\u003c/strong\u003e: Start the selected service.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCtrl+T\u003c/strong\u003e: Stop the selected service.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCtrl+R\u003c/strong\u003e: Restart the selected service.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCtrl+F\u003c/strong\u003e: Focus on the search bar.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eEnter\u003c/strong\u003e: Return focus to the services list.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"how-to-use-sysdmon\"\u003eHow to Use sysdmon\u003c/h2\u003e\n\u003ch3 id=\"installation\"\u003eInstallation\u003c/h3\u003e\n\u003cp\u003eYou can install \u003cstrong\u003esysdmon\u003c/strong\u003e using \u003ccode\u003ego install\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ego install github.com/rahulmysore23/sysdmon@latest\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAlternatively, you can download pre-built binaries from the \u003ca href=\"https://github.com/rahulmysore23/sysdmon/releases\"\u003eReleases\u003c/a\u003e page.\u003c/p\u003e\n\u003ch3 id=\"running-sysdmon\"\u003eRunning sysdmon\u003c/h3\u003e\n\u003ch4 id=\"default-mode-list-all-services\"\u003eDefault Mode (List All Services)\u003c/h4\u003e\n\u003cp\u003eTo list all systemd services, simply run:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esysdmon\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"custom-mode-load-services-from-json-file\"\u003eCustom Mode (Load Services from JSON File)\u003c/h4\u003e\n\u003cp\u003eIf you want to load a custom list of services, create a JSON file (\u003ccode\u003econfig.json\u003c/code\u003e) like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;services\u0026#34;\u003c/span\u003e: [\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;nginx.service\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;docker.service\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ssh.service\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThen run:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esysdmon -config /path/to/config.json\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"the-journey-of-building-sysdmon\"\u003eThe Journey of Building sysdmon\u003c/h2\u003e\n\u003cp\u003eBuilding \u003cstrong\u003esysdmon\u003c/strong\u003e was a fun and rewarding experience. It started as a simple idea to make my workflow more efficient, but it quickly turned into a learning opportunity. I got to explore Go’s \u003ccode\u003edbus\u003c/code\u003e package for interacting with systemd, and I discovered the power of TUI libraries like \u003ccode\u003etview\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eOf course, like most personal projects, it sat untouched for a while. But when I finally revisited it, I was able to polish it up and add some nice features, like filtering and custom service lists. It’s amazing what you can accomplish in just a couple of hours when you’re motivated!\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"future-improvements\"\u003eFuture Improvements\u003c/h2\u003e\n\u003cp\u003eWhile \u003cstrong\u003esysdmon\u003c/strong\u003e is functional, there’s always room for improvement. Here are some ideas for future enhancements:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eService Logs Integration\u003c/strong\u003e: View real-time logs for a selected service.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBulk Operations\u003c/strong\u003e: Start, stop, or restart multiple services at once.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRemote System Management\u003c/strong\u003e: Manage services on remote systems via SSH.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCustom Themes\u003c/strong\u003e: Add support for dark mode and custom colors.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePlugin System\u003c/strong\u003e: Allow users to extend functionality with plugins.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eIf you’re interested in contributing, feel free to check out the \u003ca href=\"https://github.com/rahulmysore23/sysdmon\"\u003eGitHub repository\u003c/a\u003e. Pull requests and ideas are always welcome!\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"final-thoughts\"\u003eFinal Thoughts\u003c/h2\u003e\n\u003cp\u003eBuilding \u003cstrong\u003esysdmon\u003c/strong\u003e was a fun and fulfilling side project. It not only solved a personal pain point but also gave me a chance to dive deeper into Go and TUI development. If you’re someone who manages systemd services frequently, I hope you find this tool useful. And if you have any feedback or ideas for improvement, don’t hesitate to reach out or contribute to the project.\u003c/p\u003e\n\u003cp\u003eHappy coding! 🚀\u003c/p\u003e\n","description":null,"image":null,"permalink":"https://rahulmysore23.github.io/blogs/sysdmon/","title":"Building a TUI for Managing Systemd Services: A Fun Side Project"},{"content":"\u003cp\u003eIf you’ve ever fallen down the rabbit hole of Linux, you know how addictive it can be. For me, it all started back in 2016. I was a curious kid with a laptop that barely ran Windows, and I stumbled upon Ubuntu. Little did I know, that first installation would spark a lifelong passion for tinkering, customizing, and optimizing my workflow.\u003c/p\u003e\n\u003ch2 id=\"the-beginning-ubuntu-and-the-linux-curiosity\"\u003eThe Beginning: Ubuntu and the Linux Curiosity\u003c/h2\u003e\n\u003cp\u003eI started with Ubuntu—like most people do. It was simple, user-friendly, and felt like a breath of fresh air compared to Windows. But soon, I wanted more. I tried Pop!_OS for its sleek design and gaming optimizations, Linux Mint for its familiarity, Fedora for its cutting-edge features, and even Garuda Linux because, let’s be honest, it looked \u003cem\u003ecool\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eBack then, I was dual-booting with Windows, always keeping one foot in the familiar while dipping my toes into the Linux world. But as I spent more time in Linux, I realized how much more control and freedom it gave me. I was hooked.\u003c/p\u003e\n\u003ch2 id=\"the-vim-obsession\"\u003eThe Vim Obsession\u003c/h2\u003e\n\u003cp\u003eAround the same time, I started hearing about Vim. One of my professors from 12th grade (back in 2014) had mentioned how his cousin was a Vim user and an incredible coder. He spoke about Vim like it was some kind of superpower. Naturally, I was intrigued.\u003c/p\u003e\n\u003cp\u003eI decided to give Vim a shot. At first, it was frustrating. The modal editing, the commands, the steep learning curve—it felt like I was learning a new language. But once I got the hang of it, there was no going back. Vim became my go-to editor, and I started customizing it to fit my workflow.\u003c/p\u003e\n\u003ch2 id=\"the-tiling-window-manager-revelation\"\u003eThe Tiling Window Manager Revelation\u003c/h2\u003e\n\u003cp\u003eOne fine day, while browsing Twitch, I stumbled upon Linux streamers. These folks weren’t just coding or gaming—they were showcasing their setups. And boy, were they impressive. They were using something called \u003cem\u003etiling window managers\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eI had no idea what that meant, but it looked magical. No wasted screen space, no dragging windows around—just pure efficiency. I was determined to try it out.\u003c/p\u003e\n\u003ch3 id=\"my-first-attempt-bspwm\"\u003eMy First Attempt: BSPWM\u003c/h3\u003e\n\u003cp\u003eI decided to start with BSPWM. I installed it, fired it up, and… I had no idea what I was doing. The screen was blank, and I couldn’t even open a terminal. I didn’t read the documentation (rookie mistake), and I quickly gave up, thinking I had messed up my system.\u003c/p\u003e\n\u003ch2 id=\"back-to-vim\"\u003eBack to Vim\u003c/h2\u003e\n\u003cp\u003eAfter the BSPWM disaster, I decided to stick with Vim for a while. I set up Neovim, which felt like a modern upgrade to Vim, and started configuring it for my Go development environment. It was amazing. I felt like a productivity wizard, zipping through code with my custom keybindings and plugins.\u003c/p\u003e\n\u003cp\u003eBut the allure of tiling window managers never left me. I kept watching those Twitch streamers, marveling at their setups, and dreaming of the day I could replicate it.\u003c/p\u003e\n\u003ch2 id=\"the-i3-era\"\u003eThe i3 Era\u003c/h2\u003e\n\u003cp\u003eA few months later, I decided to give tiling window managers another shot. This time, I went with i3. Unlike BSPWM, i3 came with default configurations, which made it much easier to get started. I could open a terminal, resize windows, and even switch workspaces without pulling my hair out.\u003c/p\u003e\n\u003cp\u003eI spent hours customizing my i3 setup, tweaking the config file, and adding keybindings. It felt like I was building my own operating system. I was in love.\u003c/p\u003e\n\u003ch2 id=\"regolith-linux-the-game-changer\"\u003eRegolith Linux: The Game-Changer\u003c/h2\u003e\n\u003cp\u003eBut as much as I enjoyed i3, I got tired of constantly tweaking and configuring. That’s when I discovered Regolith Linux—a pre-configured Ubuntu distro with i3 as the default window manager. It was perfect.\u003c/p\u003e\n\u003cp\u003eI stuck with Regolith for \u003cem\u003ethree years\u003c/em\u003e. During that time, I became proficient with i3 and Vim. My workflow was smooth, and my setup was a thing of beauty. People would watch me code or work, amazed at how fast I could navigate through windows and edit files.\u003c/p\u003e\n\u003ch2 id=\"the-suckless-philosophy-dwm-and-st\"\u003eThe Suckless Philosophy: DWM and ST\u003c/h2\u003e\n\u003cp\u003eWhile I was happy with i3, I couldn’t resist exploring other options. That’s when I came across DWM (Dynamic Window Manager) and the \u003cem\u003esuckless philosophy\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eFor those unfamiliar, suckless is all about simplicity, minimalism, and efficiency. Their software is lightweight, fast, and highly customizable—but only if you’re willing to dive into the source code.\u003c/p\u003e\n\u003cp\u003eI decided to give DWM a try, along with ST (Simple Terminal). It was a steep learning curve, especially since I had to edit the config.h file and recompile everything. But it was worth it. DWM felt like i3 on steroids, and ST was the perfect companion.\u003c/p\u003e\n\u003cp\u003eWhat really drew me to the suckless philosophy were these three hilarious and eye-opening websites:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://motherfuckingwebsite.com/\"\u003eMotherfucking Website\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://bettermotherfuckingwebsite.com/\"\u003eBetter Motherfucking Website\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://bettermotherfuckingwebsite.com/\"\u003eEven Better Motherfucking Website\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThese websites made me laugh out loud while also making me think about how bloated and overcomplicated modern web design can be. They perfectly encapsulate the suckless philosophy: keep it simple, stupid. Reading these sites inspired me to explore DWM and embrace minimalism in my own setup.\u003c/p\u003e\n\u003ch2 id=\"the-hyprland-experiment\"\u003eThe Hyprland Experiment\u003c/h2\u003e\n\u003cp\u003eAs much as I loved i3 and DWM, they lacked one thing: eye candy. Don’t get me wrong, they were incredibly efficient, but they felt like old tech. That’s when I discovered Wayland and Hyprland.\u003c/p\u003e\n\u003ch3 id=\"what-is-wayland-and-hyprland\"\u003eWhat is Wayland and Hyprland?\u003c/h3\u003e\n\u003cp\u003eWayland is a modern display server protocol designed to replace the aging X11 system. It offers better performance, security, and simplicity. Hyprland, on the other hand, is a dynamic tiling window manager built for Wayland. It combines the efficiency of tiling window managers with modern aesthetics like smooth animations, rounded corners, and transparency.\u003c/p\u003e\n\u003cp\u003eHyprland is highly customizable and designed for users who want both functionality and beauty. It’s perfect for developers, designers, or anyone who spends a lot of time in their desktop environment.\u003c/p\u003e\n\u003cp\u003eI tried Hyprland on Fedora during its early days, but it was still in development and didn’t work well for me. Frustrated, I switched back to i3.\u003c/p\u003e\n\u003ch2 id=\"the-present-hyprland-and-fedora\"\u003eThe Present: Hyprland and Fedora\u003c/h2\u003e\n\u003cp\u003eFast forward to today. After a six-month break from Linux (life happens), I’m back—and this time, I’m all in on Hyprland.\u003c/p\u003e\n\u003cp\u003eI installed Fedora and used the \u003ca href=\"https://github.com/mylinuxforwork/dotfiles\"\u003emy-linux-for-work dotfiles\u003c/a\u003e to set up Hyprland. The setup process was seamless, thanks to a simple installation script provided by the creator. I was stunned by how polished and functional everything was.\u003c/p\u003e\n\u003cp\u003eHyprland is everything I’ve ever wanted in a window manager. It’s fast, efficient, and visually stunning. The animations are smooth, the customization options are endless, and it just \u003cem\u003efeels\u003c/em\u003e right.\u003c/p\u003e\n\u003cp\u003eI’ve made a few tweaks to the dotfiles to suit my preferences, but overall, it’s been a fantastic experience.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/hyprland_terminals.jpg\" alt=\"Hyprland terminal\"\u003e\n\u003cstrong\u003eHyperland terminals with htop, cmatrix\u003c/strong\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e\u003cimg src=\"/images/hyprland_vim_browser.jpg\" alt=\"Hyprland\"\u003e\n\u003cstrong\u003eHyperland with browser, neovim\u003c/strong\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"whats-next\"\u003eWhat’s Next?\u003c/h2\u003e\n\u003cp\u003eThis is just the beginning. I’ve got a whole list of terminal tools and setups that I use to speed up my development workflow. I’ll be sharing those in another blog post soon.\u003c/p\u003e\n\u003cp\u003eFor now, I’m just enjoying the perfect blend of efficiency and aesthetics that Hyprland provides. If you’re curious, check out \u003ca href=\"https://hyprland.org/\"\u003eHyprland\u003c/a\u003e, \u003ca href=\"https://regolith-desktop.com/\"\u003eRegolith Linux\u003c/a\u003e and \u003ca href=\"https://neovim.io/\"\u003eNeovim\u003c/a\u003e to see what all the fuss is about.\u003c/p\u003e\n\u003cp\u003eAnd if you’re just starting your Linux journey, don’t be afraid to experiment. It’s a wild ride, but it’s worth it.\u003c/p\u003e\n\u003cp\u003eUntil next time, happy tinkering!\u003c/p\u003e\n\u003chr\u003e\n","description":null,"image":null,"permalink":"https://rahulmysore23.github.io/blogs/linuxjourney/","title":"My Linux Journey: From Ubuntu to Hyprland, Vim to Tiling Window Managers, and Everything In Between"},{"content":"\u003cp\u003eWhen my friend and I signed up for \u003cstrong\u003eHackMidwest 2024\u003c/strong\u003e, we had no idea what we were going to build. Zero. Zilch. Nada. We showed up with our laptops, a vague sense of excitement, and a whole lot of caffeine. The hackathon kicked off with some awesome workshops—Red Hat OpenShift, AWS, Pinata, and more. We attended as many as we could, soaking up knowledge and trying to figure out what we could possibly create in 24 hours.\u003c/p\u003e\n\u003cp\u003eThen came the moment of truth: the challenge announcements. We scanned the list, and one immediately caught our eye—the \u003cstrong\u003eAskUSDA Challenge\u003c/strong\u003e. It was intriguing, doable, and had a clear problem statement: help USDA provide better information to the public using AI. We looked at each other and said, “Let’s do this.”\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"the-plan-or-lack-thereof\"\u003eThe Plan (or Lack Thereof)\u003c/h2\u003e\n\u003cp\u003eWe didn’t have a detailed roadmap, but we knew we wanted to build something around \u003cstrong\u003eLarge Language Models (LLMs)\u003c/strong\u003e and \u003cstrong\u003eRetrieval-Augmented Generation (RAG)\u003c/strong\u003e. The idea was simple: create a chatbot that could answer questions using USDA’s data. But here’s the twist—we wanted to make it flexible enough to work with \u003cem\u003eany\u003c/em\u003e dataset, not just USDA-specific information.\u003c/p\u003e\n\u003cp\u003eWe started by exploring \u003cstrong\u003eRed Hat OpenShift\u003c/strong\u003e for deployment, but mid-development, we hit a snag. Deploying a model there was more complex than we anticipated. So, we pivoted to \u003cstrong\u003eAWS\u003c/strong\u003e. Specifically, we used \u003cstrong\u003eAWS Bedrock\u003c/strong\u003e and its \u003cstrong\u003eKnowledge Base\u003c/strong\u003e feature for RAG. It was surprisingly straightforward, and within hours, we had a working prototype.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/dchat_arch.png\" alt=\"Architecture\"\u003e\u003cbr\u003e\n\u003cem\u003eArchitecture of our solution\u003c/em\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"the-build\"\u003eThe Build\u003c/h2\u003e\n\u003cp\u003eHere’s the breakdown of what we built in 24 hours:\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eA Scraper to Rule Them All\u003c/strong\u003e: We created a scraper tool called \u003cstrong\u003e\u003ca href=\"https://github.com/rahulmysore23/No-Game-No-Scrape\"\u003eNo Game No Scrape\u003c/a\u003e\u003c/strong\u003e (yes, the name is a nerdy anime reference). It can scrape data from any website and format it for our chatbot.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eThe Chatbot\u003c/strong\u003e: We built \u003cstrong\u003e\u003ca href=\"https://github.com/rahulmysore23/D-Chat\"\u003eD-Chat\u003c/a\u003e\u003c/strong\u003e, a chatbot powered by AWS Bedrock and RAG. It’s designed to ingest scraped data, sync it with the knowledge base, and provide accurate, context-aware answers. The best part? It’s not USDA-specific. You can use it for any dataset.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eThe Prompt\u003c/strong\u003e: We nailed down a simple yet effective prompt that guided the chatbot to provide concise, accurate answers. It was a game-changer.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"the-usda-team-and-the-presentation\"\u003eThe USDA Team and the Presentation\u003c/h2\u003e\n\u003cp\u003eMidway through the hackathon, we hit a few roadblocks. Thankfully, the USDA team was there to help. They answered our questions, clarified the requirements, and even gave us some insights into how their data is structured. It was a huge help.\u003c/p\u003e\n\u003cp\u003eWhen it came time to present, every team got just \u003cstrong\u003e2 minutes\u003c/strong\u003e to showcase their solution. We kept it simple: we explained the problem, demonstrated the chatbot, and highlighted its flexibility. The judges were impressed, and by the end of the hackathon, we found out we’d \u003cstrong\u003ewon the USDA Challenge\u003c/strong\u003e!\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/images/dchat_demo.jpeg\" alt=\"Demo\"\u003e\u003cbr\u003e\n\u003cem\u003eDemo of our chatbot in action\u003c/em\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"lessons-learned\"\u003eLessons Learned\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003ePivot When Necessary\u003c/strong\u003e: We started with OpenShift but switched to AWS when things got too complicated. Flexibility is key in hackathons.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eKeep It Simple\u003c/strong\u003e: Our scraper and chatbot were built with simplicity in mind. No over-engineering, just a focus on solving the problem.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAsk for Help\u003c/strong\u003e: The USDA team was incredibly supportive. Don’t hesitate to reach out to mentors or challenge sponsors.\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch2 id=\"final-thoughts\"\u003eFinal Thoughts\u003c/h2\u003e\n\u003cp\u003eHackMidwest 2024 was an incredible experience. We went in with no plan, built something we’re proud of, and even won a challenge. If you’re curious about our project, check out the links below:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/rahulmysore23/No-Game-No-Scrape\"\u003eNo-Game-No-Scrape\u003c/a\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/rahulmysore23/D-Chat\"\u003eD-Chat\u003c/a\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ca href=\"https://www.linkedin.com/posts/rahulmysore23_hackmidwest2024-usdachallenge-agriculturaltech-activity-7248075478459113472-f4G7/?utm_source=share\u0026amp;utm_medium=member_desktop\"\u003eMy LinkedIn Post\u003c/a\u003e\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAnd if you’re thinking about participating in a hackathon, just go for it. You never know what you’ll end up building—or winning. 😊\u003c/p\u003e\n","description":null,"image":null,"permalink":"https://rahulmysore23.github.io/blogs/hackmidwest/","title":"HackMidwest 2024: How We Built a USDA Chatbot in 24 Hours (and Won!)"},{"content":"\u003cp\u003ePost coming soon, Till then enjoy few of my covers on YouTube. Checkout my channel for more amature covers.\u003c/p\u003e\n\u003cp\u003eAlso, I have a couple of SoundCloud links. Made those with a friend of mine 5-6 years ago.\u003c/p\u003e\n\u003cp\u003eCheers!\u003c/p\u003e\n\u003ch2 id=\"youtube-videos\"\u003eYouTube Videos\u003c/h2\u003e\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\"\u003e\n      \u003ciframe allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"allowfullscreen\" loading=\"eager\" referrerpolicy=\"strict-origin-when-cross-origin\" src=\"https://www.youtube.com/embed/L8zIcmq7JBg?autoplay=0\u0026amp;controls=1\u0026amp;end=0\u0026amp;loop=0\u0026amp;mute=0\u0026amp;start=0\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\" title=\"YouTube video\"\u003e\u003c/iframe\u003e\n    \u003c/div\u003e\n\n\u003chr\u003e\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\"\u003e\n      \u003ciframe allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"allowfullscreen\" loading=\"eager\" referrerpolicy=\"strict-origin-when-cross-origin\" src=\"https://www.youtube.com/embed/3vsIfpn4_WY?autoplay=0\u0026amp;controls=1\u0026amp;end=0\u0026amp;loop=0\u0026amp;mute=0\u0026amp;start=0\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\" title=\"YouTube video\"\u003e\u003c/iframe\u003e\n    \u003c/div\u003e\n\n\u003chr\u003e\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\"\u003e\n      \u003ciframe allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"allowfullscreen\" loading=\"eager\" referrerpolicy=\"strict-origin-when-cross-origin\" src=\"https://www.youtube.com/embed/_kxUEP23kdE?autoplay=0\u0026amp;controls=1\u0026amp;end=0\u0026amp;loop=0\u0026amp;mute=0\u0026amp;start=0\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\" title=\"YouTube video\"\u003e\u003c/iframe\u003e\n    \u003c/div\u003e\n\n\u003chr\u003e\n\u003ch2 id=\"soundcloud-tracks\"\u003eSoundCloud Tracks\u003c/h2\u003e\n\u003ciframe\n    width=\"100%\"\n    height=\"166\"\n    scrolling=\"no\"\n    frameborder=\"no\"\n    allow=\"autoplay\"\n    src=\"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/564906204\u0026color=%23ff5500\u0026auto_play=false\u0026hide_related=false\u0026show_comments=true\u0026show_user=true\u0026show_reposts=false\u0026show_teaser=true\"\u003e\n\u003c/iframe\u003e\n\n\u003chr\u003e\n\u003ciframe\n    width=\"100%\"\n    height=\"166\"\n    scrolling=\"no\"\n    frameborder=\"no\"\n    allow=\"autoplay\"\n    src=\"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/615150819\u0026color=%23ff5500\u0026auto_play=false\u0026hide_related=false\u0026show_comments=true\u0026show_user=true\u0026show_reposts=false\u0026show_teaser=true\"\u003e\n\u003c/iframe\u003e\n\n","description":"My journey with music","image":null,"permalink":"https://rahulmysore23.github.io/music/","title":"Music and Me"},{"content":"\u003cp\u003eBack in the early days of my bachelor\u0026rsquo;s degree, a friend of mine started a technical blog called \u003ca href=\"http://thecodenote.com\"\u003eThe Code Note\u003c/a\u003e. I thought it was the coolest thing ever. Inspired, I decided to start my own blog. I spent days brainstorming a name (which, honestly, I can’t even remember now) and finally launched it. It was your typical \u0026ldquo;how to solve LeetCode problems\u0026rdquo; blog. Yeah, I know—there are already millions of those out there. But hey, it got me started.\u003c/p\u003e\n\u003cp\u003eI posted a couple of times, following the same old formula: problem statement, solution, and code. While it was a good exercise, it didn’t really excite me. At the time, I had very little real-world experience, and the blog felt more like a checklist item than a passion project. After landing my first job as a software engineer, I eventually deleted the blog. It just didn’t feel like \u0026ldquo;me.\u0026rdquo;\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"after-a-while\"\u003eAfter a While\u003c/h3\u003e\n\u003cp\u003eFast forward five years, and I’ve been working as a software engineer, wearing all sorts of hats. I’ve done front-end, back-end, platform engineering, led teams, mentored junior developers, and most importantly, solved a ton of software problems. It’s been a wild ride, and I’ve learned a lot along the way.\u003c/p\u003e\n\u003cp\u003eEven though I deleted that old blog, the desire to share my experiences never really went away. I’ve always wanted to have a presence on the internet where I could talk about my journey in the tech industry, share knowledge about tools or software that aren’t well-documented, and write about system setups that boost productivity. I also wanted to share solutions to technical problems I’ve encountered—things that took me hours (or days) to figure out, but could save someone else a lot of time.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"new-beginnings\"\u003eNew Beginnings\u003c/h3\u003e\n\u003cp\u003eRecently, I made a big decision: I quit my job as a software engineer after five years and four companies (three of which were startups). I’m now pursuing a Master’s degree in Computer Science. This new chapter is all about learning, growing, and giving back to the community.\u003c/p\u003e\n\u003cp\u003eOne of the things I’m most excited about is starting this blog. It’s not just a place to share my experiences as a software engineer, but also a space to write about things that aren’t always easy to understand—whether it’s setting up a development environment, debugging a tricky issue, or exploring new tools and technologies.\u003c/p\u003e\n\u003cp\u003eThis blog is also a commitment to myself. It’s a promise to be consistent, disciplined, and intentional about sharing what I’ve learned. I hope it becomes a resource that others find useful, and maybe even inspiring.\u003c/p\u003e\n\u003cp\u003eHere’s to new beginnings! 🚀\u003c/p\u003e\n","description":null,"image":null,"permalink":"https://rahulmysore23.github.io/blogs/first_post/","title":"My Presence on the Internet"}]